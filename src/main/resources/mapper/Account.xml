<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="pungmul.pungmul.repository.member.mapper.AccountMapper">

    <resultMap id="AccountResultMap" type="pungmul.pungmul.domain.member.account.Account">
        <id property="id" column="account_id" />
        <result property="username" column="username" />
        <result property="password" column="password" />
        <result property="withdraw" column="withdraw" />
        <result property="lastPasswordChanged" column="last_password_changed" />
        <result property="enabled" column="enabled" />
        <result property="accountExpired" column="account_expired" />
        <result property="accountLocked" column="account_locked" />
        <result property="createdAt" column="created_at" />
        <result property="updatedAt" column="updated_at" />
        <collection property="roles" ofType="pungmul.pungmul.domain.member.account.UserRole">
            <result property="role" column="role_name" />
        </collection>
    </resultMap>

    <!-- Insert Account -->
    <insert id="saveAccount" useGeneratedKeys="true" keyProperty="id" keyColumn="id">
        INSERT INTO account (username, password)
        VALUES (#{username}, #{password})
    </insert>

    <!-- Update Password -->
    <update id="updatePassword" parameterType="map">
        UPDATE account
        SET password = #{password}
        WHERE id = #{accountId}
    </update>

    <select id="getAccountByAccountId" parameterType="java.lang.Long" resultMap="AccountResultMap">
        SELECT
            a.id AS account_id,
            a.username,
            a.password,
            a.withdraw,
            a.last_password_changed,
            a.enabled,
            a.account_expired,
            a.account_locked,
            a.created_at,
            a.updated_at,
            r.role_name AS role_name
        FROM account a
                 LEFT JOIN account_roles ar ON a.id = ar.account_id
                 LEFT JOIN roles r ON ar.role_id = r.id
        WHERE a.id = #{id}
          AND a.withdraw = FALSE;
    </select>

    <select id="getAccountByEmail" parameterType="java.lang.String" resultMap="AccountResultMap">
        SELECT
            a.id AS account_id,
            a.username,
            a.password,
            a.withdraw,
            a.last_password_changed,
            a.enabled,
            a.account_expired,
            a.account_locked,
            a.created_at,
            a.updated_at,
            r.role_name AS role_name
        FROM account a
                 LEFT JOIN account_roles ar ON a.id = ar.account_id
                 LEFT JOIN roles r ON ar.role_id = r.id
        WHERE a.username = #{email}
          AND a.withdraw = FALSE;
    </select>

    <!-- Login ID로 Account 조회 (삭제된 계정 제외, roles 포함) -->
    <select id="getAccountByUsername" parameterType="java.lang.String" resultMap="AccountResultMap">
        SELECT
            a.id AS account_id,
            a.username,
            a.password,
            a.withdraw,
            a.last_password_changed,
            a.enabled,
            a.account_expired,
            a.account_locked,
            a.created_at,
            a.updated_at,
            r.role_name AS role_name
        FROM account a
                 LEFT JOIN account_roles ar ON a.id = ar.account_id
                 LEFT JOIN roles r ON ar.role_id = r.id
        WHERE a.username = #{username}
          AND a.withdraw = FALSE;
    </select>

    <!-- Login ID로 Account 조회 (로그인 용으로 삭제 여부 무시, roles 포함) -->
    <select id="getAccountByUsernameForLogin" parameterType="java.lang.String" resultMap="AccountResultMap">
        SELECT
            a.id AS account_id,
            a.username,
            a.password,
            a.withdraw,
            a.last_password_changed,
            a.enabled,
            a.account_expired,
            a.account_locked,
            a.created_at,
            a.updated_at,
            r.role_name AS role_name
        FROM account a
                 LEFT JOIN account_roles ar ON a.id = ar.account_id
                 LEFT JOIN roles r ON ar.role_id = r.id
        WHERE a.username = #{username};
    </select>

    <!-- Enable Account -->
    <update id="setEnabledAccount" parameterType="java.lang.Long">
        UPDATE account
        SET enabled = true
        WHERE id = #{accountId}
    </update>

    <!-- Soft Delete Account (삭제 상태 설정) -->
    <update id="deleteAccount" parameterType="java.lang.String">
        UPDATE account
        SET withdraw = TRUE
        WHERE username = #{username}
    </update>

    <!-- Ban Account -->
    <update id="banAccount" parameterType="java.lang.String">
        UPDATE account
        SET account_locked = TRUE
        WHERE username = #{username}
    </update>

    <!-- Update Account -->
    <update id="unlockAccount" parameterType="long">
        UPDATE account
        SET account_locked = False
        WHERE id = #{id}
    </update>

</mapper>
