<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="pungmul.pungmul.repository.chat.mapper.ChatRoomMapper">

    <!-- ChatRoom ResultMap -->
    <resultMap id="ChatRoomResultMap" type="pungmul.pungmul.domain.chat.ChatRoom">
        <id property="id" column="id" />
        <result property="roomUUID" column="room_uuid" />
        <result property="createdBy" column="created_by" />
        <result property="isGroup" column="is_group" />
        <result property="roomName" column="room_name" />
        <result property="profileImageUrl" column="profile_image_url" />
        <result property="createdAt" column="created_at" />
<!--        <result property="last" column="created_at" />-->
<!--        <result property="unreadCount" column="unread_count" />-->
    </resultMap>

    <!-- Create ChatRoom -->
    <insert id="createChatRoom" parameterType="pungmul.pungmul.domain.chat.ChatRoom" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO chat_room (room_uuid, created_by, is_group, room_name, profile_image_url, created_at)
        VALUES (#{roomUUID}, #{createdBy}, #{isGroup}, #{roomName}, #{profileImageUrl}, #{createdAt})
    </insert>

    <!-- Add ChatRoom Members -->
    <insert id="addChatRoomMembers">
        INSERT INTO chat_room_members (chat_room_id, user_id)
        VALUES
        <foreach collection="memberIds" item="memberId" separator=",">
            (#{chatRoomId}, #{memberId})
        </foreach>
    </insert>

    <!-- Find ChatRoom by Users -->
    <select id="findChatRoomByUsers" resultMap="ChatRoomResultMap">
        SELECT
            cr.id,
            cr.room_uuid,
            cr.created_by,
            cr.is_group,
            cr.room_name,
            cr.profile_image_url,
            cr.created_at
        FROM chat_room cr
                 JOIN chat_room_members crm1 ON cr.room_uuid = crm1.chat_room_id
                 JOIN chat_room_members crm2 ON cr.room_uuid = crm2.chat_room_id
        WHERE crm1.user_id = (SELECT id FROM user WHERE email = #{senderUsername})
          AND crm2.user_id = (SELECT id FROM user WHERE email = #{receiverUsername})
          AND cr.is_group = FALSE;
    </select>

<!--    &lt;!&ndash; Find ChatRooms by User ID &ndash;&gt;-->
<!--    <select id="findChatRoomsByUserId" resultMap="ChatRoomResultMap" parameterType="pungmul.pungmul.dto.chat.FindChatRoomByUserIdDTO">-->
<!--        SELECT-->
<!--            cr.id,-->
<!--            cr.room_uuid,-->
<!--            cr.created_by,-->
<!--            cr.is_group,-->
<!--            cr.room_name,-->
<!--            cr.profile_image_url,-->
<!--            cr.created_at,-->
<!--            (-->
<!--                SELECT COUNT(*)-->
<!--                FROM chat_messages-->
<!--                WHERE chat_room_uuid = cr.room_uuid-->
<!--                  AND receiver_username = #{username}-->
<!--                  AND is_read = FALSE-->
<!--            ) AS unread_count,-->
<!--            MAX(m.created_at) AS last_message_time  &#45;&#45; 채팅방의 마지막 메시지 시간-->
<!--        FROM chat_room cr-->
<!--                 LEFT JOIN chat_room_members cm ON cr.room_uuid = cm.chat_room_id-->
<!--                 LEFT JOIN chat_messages m ON m.chat_room_uuid = cr.room_uuid  &#45;&#45; 채팅 메시지와 연결-->
<!--        WHERE cm.user_id = #{userId}-->
<!--        GROUP BY cr.room_uuid  &#45;&#45; 채팅방을 기준으로 그룹화-->
<!--        ORDER BY-->
<!--            &#45;&#45; 메시지가 있는 경우 마지막 메시지 시간으로 정렬하고, 메시지가 없는 경우 채팅방 생성 시간으로 정렬-->
<!--            COALESCE(MAX(m.created_at), cr.created_at) DESC-->
<!--        LIMIT #{limit} OFFSET #{offset};-->
<!--    </select>-->

    <!-- Find ChatRooms by User ID -->
    <select id="findChatRoomsByUserId" resultMap="ChatRoomResultMap" parameterType="pungmul.pungmul.dto.chat.FindChatRoomByUserIdDTO">
        SELECT
            cr.id,
            cr.room_uuid,
            cr.created_by,
            cr.is_group,
            cr.room_name,
            cr.profile_image_url,
            cr.created_at
        FROM chat_room cr
                 LEFT JOIN chat_room_members cm ON cr.room_uuid = cm.chat_room_id
                 LEFT JOIN chat_messages m ON m.chat_room_uuid = cr.room_uuid  -- 채팅 메시지와 연결
        WHERE cm.user_id = #{userId}
        GROUP BY cr.room_uuid, cr.created_at  -- 채팅방을 기준으로 그룹화
        ORDER BY
            -- 메시지가 있는 경우 마지막 메시지 시간으로 정렬하고, 메시지가 없는 경우 채팅방 생성 시간으로 정렬
            COALESCE(MAX(m.timestamp), cr.created_at) DESC
        LIMIT #{limit} OFFSET #{offset};
    </select>


    <!-- Update Last Message -->
    <update id="updateLastMessage" parameterType="pungmul.pungmul.dto.chat.UpdateLastMessageDTO">
        UPDATE chat_room
        SET last_message_id = #{messageId},
            last_message_time = CURRENT_TIMESTAMP
        WHERE room_uuid = #{chatRoomUUID}
    </update>

    <!-- Find ChatRoom by UUID -->
    <select id="findChatRoomByUUID" parameterType="string" resultMap="ChatRoomResultMap">
        SELECT
            cr.id,
            cr.room_uuid,
            cr.created_by,
            cr.is_group,
            cr.room_name,
            cr.profile_image_url,
            cr.created_at
        FROM chat_room cr
        WHERE cr.room_uuid = #{chatRoomUUID}
    </select>

    <!-- Find ChatRoom Member List -->
    <select id="findChatRoomMemberList" parameterType="string" resultType="java.lang.Long">
        SELECT user_id
        FROM chat_room_members
        WHERE chat_room_id = #{chatRoomUUID}
    </select>

    <!-- Select ChatRoom by ID -->
    <select id="selectChatRoomById" parameterType="long" resultMap="ChatRoomResultMap">
        SELECT
            cr.id,
            cr.room_uuid,
            cr.created_by,
            cr.is_group,
            cr.room_name,
            cr.profile_image_url,
            cr.created_at,
            (
                SELECT COUNT(*)
                FROM chat_messages
                WHERE chat_room_uuid = cr.room_uuid
                  AND is_read = FALSE
            ) AS unread_count
        FROM chat_room cr
        WHERE cr.id = #{id}
    </select>

</mapper>
